name: Publish/Scan Docker image

on:
  push:
    branches:
      - 'main'
  schedule:
    - cron: '0 */6 * * *' # Execute every 6 hours, you can adjust the schedule as needed


###################################
# PERMISSIONS
###################################
permissions:
  contents: write
  pull-requests: read
  security-events: write

###################################
# JOBS
###################################
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check for new release
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: KYVENetwork
          REPO_NAME: kyvejs
        run: |
          all_releases=$(gh api repos/$REPO_OWNER/$REPO_NAME/releases --jq '.[] | select(.tag_name | startswith("@kyve/kysor")) | .tag_name')
          latest_release=$(echo "$all_releases" | head -n 1)
          echo "Latest release: $latest_release"
          echo "::set-output name=latest_release::$latest_release"

      - name: Compare with previous release
        id: compare_release
        run: |
          previous_release=$(cat .previous_release)
          latest_release="${{ steps.check_release.outputs.latest_release }}"
          if [ "$latest_release" != "$previous_release" ]; then
            echo "New release found: $latest_release"
            echo "::set-output name=new_release_detected::true"
            echo $latest_release > .previous_release
          else
            echo "No new release found"
            echo "::set-output name=new_release_detected::false"
          fi

      ###################################
      # NEW VERSION AVALAIBLE
      ###################################
      - name: Get the latest kysor-linux-x64.zip asset download URL
        id: get_asset_url
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: KYVENetwork
          REPO_NAME: kyvejs
          ASSET_NAME: kysor-linux-x64.zip
        run: |
          latest_release_id=$(gh api repos/$REPO_OWNER/$REPO_NAME/releases --jq '.[] | select(.tag_name | startswith("@kyve/kysor")) | .id' | head -n 1)
          asset_url=$(gh api repos/$REPO_OWNER/$REPO_NAME/releases/$latest_release_id/assets --jq ".[] | select(.name == \"$ASSET_NAME\") | .browser_download_url")
          echo "kysor-linux-x64.zip download URL: $asset_url"
          echo "::set-output name=asset_url::$asset_url"
    
      - name: Get package name and version
        id: get_package_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: KYVENetwork
          REPO_NAME: kyvejs
        run: |
          latest_release_tag=$(gh api repos/$REPO_OWNER/$REPO_NAME/releases --jq '.[] | select(.tag_name | startswith("@kyve/kysor")) | .tag_name' | head -n 1)
          package_name=$(echo "$latest_release_tag" | cut -d'@' -f2)
          package_version=$(echo "$latest_release_tag" | cut -d'@' -f3)
          echo "Package name: $package_name"
          echo "Package version: $package_version"
          echo "::set-output name=package_name::$package_name"
          echo "::set-output name=package_version::$package_version"

      - name: Login to Docker Hub
        if: steps.compare_release.outputs.new_release_detected == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Set up Docker Buildx
        if: steps.compare_release.outputs.new_release_detected == 'true'
        uses: docker/setup-buildx-action@v2
        
      - name: Generate Docker metadata
        if: steps.compare_release.outputs.new_release_detected == 'true'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: noodlercc/kyve-protocol
          tags: |
            type=raw,value=${{ steps.get_package_info.outputs.package_version }}
            type=raw,value=latest,condition=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        
      - name: Build and push
        if: steps.compare_release.outputs.new_release_detected == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            kysor_link=${{ steps.get_asset_url.outputs.asset_url }}
            name=${{ steps.get_package_info.outputs.package_name }}
            version=${{ steps.get_package_info.outputs.package_version }}

      - name: Update Docker Hub description
        if: steps.compare_release.outputs.new_release_detected == 'true'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: noodlercc/kyve-protocol

      - name: Commit and push the updated previous_release file
        if: steps.compare_release.outputs.new_release_detected == 'true'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git add .previous_release
          git commit -m "Update .previous_release with the latest release"
          git push

      - name: Run Trivy vulnerability scanner in repo mode
        if: steps.compare_release.outputs.new_release_detected == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'noodlercc/kyve-protocol:latest'
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        if: steps.compare_release.outputs.new_release_detected == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
